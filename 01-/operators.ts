// Optional chaining
// 몫 연산자 없음 -> Math.floor 사용할 것

//
'property' in obj;

// ts 전용

// Optional chaining
let value = obj?.property?.subProperty;

// nullish 병합 someValue가 null이거나 undefined라면 뒤에 기본값
let value2 = someValue ?? 'default';

// JavaScript에서 사용 가능한 연산자
// JavaScript는 다양한 연산자를 제공하며, 이는 다음과 같은 범주로 나눌 수 있습니다:

//     할당 연산자: =, +=, -=, *=, /=, %=, **=, <<=, >>=, >>>=, &=, ^=, |=
//     비교 연산자: ==, !=, ===, !==, <, <=, >, >=
//     산술 연산자: +, -, *, /, %, ++, --
//     비트 연산자: &, |, ^, ~, <<, >>, >>>
//     논리 연산자: &&, ||, !
//     문자열 연산자: 문자열 결합을 위한 +
//     삼항 조건 연산자: 조건에 따라 값을 선택하는 (조건) ? 값1 : 값2
//     기타: 객체 접근(.), 배열 접근([]), 함수 호출(()), 객체 생성(new), 삭제(delete), 타입 확인(typeof), 무효화(void), 인스턴스 확인(instanceof)

// TypeScript에서 사용 가능한 추가 연산자
// TypeScript는 JavaScript의 모든 연산자를 지원하면서, 타입 시스템을 활용한 몇 가지 고유한 연산자를 추가로 제공합니다:

//     타입 연산자
//         typeof: JavaScript와 유사하지만, 타입 컨텍스트에서 사용되어 변수의 타입을 가져옵니다.
//         keyof: 객체 타입의 모든 키를 문자열 유니온 타입으로 반환합니다.
//         in: 객체 내에 속성이 있는지 확인하며, 타입 좁히기에 사용됩니다.
//         extends: 조건부 타입에서 사용되어 특정 타입이 다른 타입을 확장하는지를 확인합니다.
//         infer: 조건부 타입 내에서 사용되어 타입을 추론합니다.
//         유니온(|) 및 인터섹션(&) 타입: 여러 타입을 조합하여 새로운 타입을 정의합니다

// TypeScript는 이러한 추가적인 타입 관련 연산자를 통해 코드의 안정성을 높이고, 복잡한 타입 정의를 보다 유연하게 처리할 수 있도록 합니다. 이러한 기능들은 JavaScript에는 없는 TypeScript만의 강력한 도구입니다.
