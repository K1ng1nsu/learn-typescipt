01 - 타입, 연산자
{
    // boolean
    // number
    // bigint
    // string
    // Array<> ,[]
    // Enum
    // any, unknown, void
    // Union Types
    // Type Aliases
    // Interface
    // Intersection Types
    // Utility Types -> 05
    // 등등..


}

02 - 컴파일러 설정

03 -  클래스, 인터페이스

04 -  고급 타입
{
    // intersection types (&)
    // Type Guards - runtime type check - typeof, in, instancesof, 등
    // Discriminated Unions(Tagged union) 구별된 유니온 - Type Guards 중 하나로 사용 {type:'horse'}
    // Type Casting - 타입 스크립트한테 타입을 알려줄 때 const inputTag = document.getElementById('input-field') as HTMLINPUTELEMENT
    // index type - 특정 객체의 제한되지 않은 수의 키 벨류 타입을 정할 때 [key:KeyType] : ValueType
    // Function Overloads - 함수가 리턴하는게 모호하지 않게 해줄 수 있음
    // optional chaining - (?.) 객체의 속성, 배열요소 함수 호출등에 사용할 수 있으며 null또는 undefined가 아닌 경우에 접근하도록 함 runtime safety 강화
    // Nullish Coalescing - (??)  Falsy || FalsyFallback과 비슷하게 사용 Falsy가 null이나 undefined에만 Fallback 사용
}

05 -  제네릭
{
    // Generics Funtions
    // Constraints - keyof
    // Generics Classes
    // Special TypeScript Types - Utility Types
}

06 -  데코레이터
{
    
}